/**
 * Open Wonderland
 *
 * Copyright (c) 2010, Open Wonderland Foundation, All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * The Open Wonderland Foundation designates this particular file as
 * subject to the "Classpath" exception as provided by the Open Wonderland
 * Foundation in the License file that accompanied this code.
 */
package org.jdesktop.wonderland.modules.textEditor.client;

import javax.swing.border.TitledBorder;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Document;

/**
 *
 * @author Jonathan Kaplan <jonathankap@gmail.com>
 */
public class TextEditorPanel extends javax.swing.JPanel {
    private TextEditorWindow window;

    /** Creates new form TextEditorPanel */
    public TextEditorPanel(TextEditorWindow window, String contentType) {
        this.window = window;

        initComponents();
        codePane.setContentType(contentType);
    }

    public void setFileLabel(String fileName) {
        jLabel5.setText(fileName);
    }
    public Document getDocument() {
        return codePane.getDocument();
    }

    public void highlightLine(int lineNumber) {
        String text = codePane.getText();
        codePane.getHighlighter().removeAllHighlights();

        int startIdx = 0;
        for (int i = 0; i < lineNumber; i++) {
            startIdx = text.indexOf('\n', startIdx + 1);
        }

        int endIdx = text.indexOf('\n', startIdx + 1);

        try {
            if (text.charAt(startIdx) == '\n') {
                startIdx += 1;
            }

            codePane.getHighlighter().addHighlight(startIdx, endIdx,
                                                    DefaultHighlighter.DefaultPainter);

            // scroll the window to the current position
            codePane.setCaretPosition(startIdx);
        } catch (BadLocationException ble) {
            ble.printStackTrace();
        }
    }

    public void clearHighlight() {
        codePane.getHighlighter().removeAllHighlights();
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        codePane = new javax.swing.JEditorPane();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 35, 0, 0));

        codePane.setBackground(new java.awt.Color(254, 254, 254));
        jScrollPane1.setViewportView(codePane);

        jLabel5.setText("In-World Document");

        jButton1.setText("Options");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 722, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(651, 651, 651)
                                .addComponent(jButton1))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 722, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(27, 27, 27))
        );

        jLabel5.getAccessibleContext().setAccessibleName("fileLabel");
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane codePane;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}
